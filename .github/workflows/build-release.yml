name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact: AppImage
          - os: windows-latest
            artifact: exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install binary dependencies
        run: |
          echo "Installing binary dependencies..."
          node install-binaries.mjs
          
      - name: Verify setup
        run: |
          echo "Verifying required components..."
          node verify-setup.mjs
          
      - name: Check for whisper binary
        run: |
          echo "Checking for whisper binary..."
          ls -la app/resources || true
          ls -la app/models || true

      - name: Build application
        run: pnpm build

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm electron:build --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm electron:build --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check release directory (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Release directory contents:"
          ls -la release || true
          echo "Checking for AppImage:"
          find release -name "*.AppImage" || true
          
      - name: Check release directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Release directory contents:"
          dir release || true
          echo "Checking for exe:"
          dir release /s /b | findstr ".exe" || true

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: autochar-studio-linux
          path: release/*.AppImage
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: autochar-studio-windows
          path: release/*.exe
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: |
          echo "Linux builds:"
          ls -la autochar-studio-linux || true
          echo "Windows builds:"
          ls -la autochar-studio-windows || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            autochar-studio-linux/*.AppImage
            autochar-studio-windows/*.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
